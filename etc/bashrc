# ------------------------------------------------------------------------------
# Bash features
# ------------------------------------------------------------------------------

# Bash optional shell behavior
# cdable_vars
#     If this is set, an argument to the cd builtin command that
#     is not a directory is assumed to be the name of a variable whose value is
#     the directory to change to.

# cdspell
#     If set, minor errors in the spelling of a directory component in a cd
#     command will be corrected. The errors checked for are transposed characters,
#     a missing character, and a character too many. If a correction is found, the
#     corrected path is printed, and the command proceeds. This option is only used
#     by interactive shells.
shopt -s cdspell

# checkhash
#     If this is set, Bash checks that a command found in the hash table exists
#     before trying to execute it. If a hashed command no longer exists, a normal
#     path search is performed.

# checkwinsize
#     If set, Bash checks the window size after each command and, if necessary,
#     updates the values of LINES and COLUMNS.
shopt -s checkwinsize

# cmdhist
#     If set, Bash attempts to save all lines of a multiple-line command in the
#     same history entry. This allows easy re-editing of multi-line commands.
shopt -s cmdhist

# dotglob
#     If set, Bash includes filenames beginning with a `.' in the results of filename
#     expansion.

# execfail
#     If this is set, a non-interactive shell will not exit if it cannot execute
#     the file specified as an argument to the exec builtin command.
#     An interactive shell does not exit if exec fails.
shopt -s execfail

# expand_aliases
#     If set, aliases are expanded. This option is enabled by default for interactive
#     shells.

# extglob
#     If set, the extended pattern matching features described above are enabled.
shopt -s extglob

# histappend
#     If set, the history list is appended to the history file when the shell exits,
#     rather than overwriting the history file.
#        shopt -s histappend
#     To append every line to history individually set:
#        PaROMPT_COMMAND='history -a'
#     With these two settings, a new shell will get the history lines from all previous
#     shells instead of the default 'last window closed'>history
#    (the history file is named by the value of the HISTFILE variable)
shopt -s histappend

# histreedit
#     If set, and Readline is being used, a user is given the opportunity to re-edit
#     a failed history substitution.

# histverify
#     If set, and Readline is being used, the results of history substitution
#     are not immediately passed to the shell parser. Instead, the resulting line
#     is loaded into the Readline editing buffer, allowing further modification.

# hostcomplete
#     If set, and Readline is being used, Bash will attempt to perform hostname
#     completion when a word containing a `@' is being completed.
#     This option is enabled by default.

# huponexit
#     If set, Bash will send SIGHUP to all jobs when an interactive
#     login shell exits.

# interactive_comments
#     Allow a word beginning with `#' to cause that word and all
#     remaining characters on that line to be ignored in an interactive shell. This
#     option is enabled by default.

# lithist
#     If enabled, and the cmdhist option is enabled, multi-line commands
#     are saved to the history with embedded newlines rather than using semicolon
#     separators where possible.

# mailwarn
#     If set, and a file that Bash is checking for mail has been accessed since
#     the last time it was checked, the message "The mail in mailfile
#     has been read" is displayed.

# no_empty_cmd_completion
#     If set, and Readline is being used, Bash will not attempt to search the
#     PATH for possible completions when completion is attempted on
#     an empty line.
shopt -s no_empty_cmd_completion

# nocaseglob
#     If set, Bash matches filenames in a case-insensitive fashion when performing
#     filename expansion.

# nullglob
#     If set, Bash allows filename patterns which match no files to expand to
#     a null string, rather than themselves.

# progcomp
#     If set, the programmable completion facilities are enabled. This option
#     is enabled by default.

# promptvars
#     If set, prompt strings undergo variable and parameter expansion after being
#     expanded. This option is enabled by default.

# restricted_shell
#     The shell sets this option if it is started in restricted mode. The value
#     may not be changed. This is not reset when the startup files are executed,
#     allowing the startup files to discover whether or not a shell is restricted.

# shift_verbose
#     If this is set, the shift builtin prints an error message when
#     the shift count exceeds the number of positional parameters.

# sourcepath
#     If set, the source builtin uses the value of PATH
#     to find the directory containing the file supplied as an argument. This option
#     is enabled by default.

# xpg_echo
#     If set, the echo builtin expands backslash-escape sequences
#     by default.unset autologout

# Umask settings
umask 027

# PS1    
#     The value of this parameter is expanded (see PROMPTING below) and used 
#     as the primary prompt string.  The default value is ''\s-\v\$ ''.
#export PS1="\e[1m\u@`hostname -f` #\e[0m "
HOSTNAME=`hostname -f`

# Only set these if truely interactive (cf. remote shell daemon)
if [ ! -z "$PS1" ]; then
    BOLD="\[$(tput bold)\]"
    RESET="\[$(tput sgr0)\]"
fi

export PS1="$BOLD\u@$HOSTNAME # $RESET"

# PS2
#     The value of this parameter is expanded as with PS1 and used as the 
#     secondary prompt string.  The default is ''> ''.
export PS2="$BOLD\u@$HOSTNAME > $RESET"

# Enable vi mode in bash
#set -o vi

# Clear prompt command
export PROMPT_COMMAND=''

# ------------------------------------------------------------------------------
# Common alias interface 
# ------------------------------------------------------------------------------

function a {
    alias $1="$2"
}

# ------------------------------------------------------------------------------
# Load Sama-sama tools 
# ------------------------------------------------------------------------------

export PATH=$PATH:$SAMA_SAMA_PATH/bin

# ------------------------------------------------------------------------------
# End of file
# ------------------------------------------------------------------------------
